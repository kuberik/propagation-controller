// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kuberik/propagation-controller/pkg/oci (interfaces: OCIClient)
//
// Generated by this command:
//
//	mockgen -destination fake/mock_ociclient.go -package fake github.com/kuberik/propagation-controller/pkg/oci OCIClient
//
// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	v1 "github.com/google/go-containerregistry/pkg/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockOCIClient is a mock of OCIClient interface.
type MockOCIClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCIClientMockRecorder
}

// MockOCIClientMockRecorder is the mock recorder for MockOCIClient.
type MockOCIClientMockRecorder struct {
	mock *MockOCIClient
}

// NewMockOCIClient creates a new mock instance.
func NewMockOCIClient(ctrl *gomock.Controller) *MockOCIClient {
	mock := &MockOCIClient{ctrl: ctrl}
	mock.recorder = &MockOCIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCIClient) EXPECT() *MockOCIClientMockRecorder {
	return m.recorder
}

// Pull mocks base method.
func (m *MockOCIClient) Pull(arg0 string) (v1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", arg0)
	ret0, _ := ret[0].(v1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockOCIClientMockRecorder) Pull(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockOCIClient)(nil).Pull), arg0)
}

// Push mocks base method.
func (m *MockOCIClient) Push(arg0 v1.Image, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockOCIClientMockRecorder) Push(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockOCIClient)(nil).Push), arg0, arg1)
}
